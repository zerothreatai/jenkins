package io.jenkins.plugins.zerothreatai;

import edu.umd.cs.findbugs.annotations.NonNull;
import hudson.*;
import hudson.model.AbstractProject;
import hudson.model.Result;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.BuildStepMonitor;
import hudson.tasks.Builder;
import hudson.util.Secret;
import io.jenkins.plugins.zerothreatai.models.ScanResponse;
import io.jenkins.plugins.zerothreatai.services.ScanService;
import jenkins.tasks.SimpleBuildStep;

import org.jenkinsci.Symbol;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;

import java.io.IOException;
import java.io.PrintStream;

public class VulnerabilityScanBuilder extends Builder implements SimpleBuildStep {
    private Secret token;
    private boolean waitForAnalysis;

    /**
     * Only required parameter in the constructor;
     * waitForAnalysis stays false unless explicitly checked.
     */
    @DataBoundConstructor
    public VulnerabilityScanBuilder(String token) {
        this.token = Secret.fromString(token);
        this.waitForAnalysis = false;
    }

    public String getToken() {
        return Secret.toString(this.token);
    }

    @DataBoundSetter
    public void setToken(String ZT_TOKEN) {
        this.token = Secret.fromString(ZT_TOKEN);
    }

    public boolean getWaitForAnalysis() {
        return this.waitForAnalysis;
    }

    @DataBoundSetter
    public void setWaitForAnalysis(boolean waitForAnalysis) {
        this.waitForAnalysis = waitForAnalysis;
    }

    @Override
    public void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env,
            @NonNull Launcher launcher, @NonNull TaskListener listener) throws InterruptedException, IOException {
        PrintStream logger = listener.getLogger();
        if (this.getToken() == null || this.getToken().trim().isEmpty()) {
            run.setResult(Result.FAILURE);
            throw new AbortException("Please configure a valid ZT_TOKEN.");
        }

        try {
            // Initiate web scan
            logger.println("Initiating security scan request.");
            ScanResponse scanResponse = ScanService.initiateScan(this.getToken());
            if (scanResponse.Status != 200) {
                run.setResult(Result.FAILURE);
                throw new AbortException("\nFailed to initiate scan. \nReason: " + scanResponse.Message);
            }

            logger.println("\nScan started successfully.\nScan Report Url:" + scanResponse.Url);

            // Poll for scan completion
            if (this.waitForAnalysis) {
                boolean scanCompleted = ScanService.pollScanStatus(this.getToken(), scanResponse.Code, logger);
                if (!scanCompleted) {
                    run.setResult(Result.FAILURE);
                    throw new AbortException("Scan did not complete successfully.");
                } else {
                    logger.println("Scan completed successfully.");
                }
            }
        } catch (Exception e) {
            run.setResult(Result.FAILURE);
            throw new AbortException("Status polling failed: " + e.getMessage());
        }
    }

    @Extension
    @Symbol("zeroThreatAIScan")
    public static final class DescriptorImpl extends BuildStepDescriptor<Builder> {
        @Override
        @SuppressWarnings("rawtypes")
        public boolean isApplicable(Class<? extends AbstractProject> jobType) {
            return true;
        }

        @NonNull
        @Override
        public String getDisplayName() {
            return "ZeroThreat AI Security Scan";
        }
    }

    @Override
    public BuildStepMonitor getRequiredMonitorService() {
        return BuildStepMonitor.NONE;
    }
}
